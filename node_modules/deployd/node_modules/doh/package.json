{
  "author": {
    "name": "Ritchie Martori"
  },
  "name": "doh",
  "version": "0.0.4",
  "repository": {
    "url": "git://github.com/ritch/doh.git"
  },
  "engines": {
    "node": ">= 0.8.x"
  },
  "main": "index",
  "dependencies": {
    "ejs": "0.8.x"
  },
  "devDependencies": {
    "shelljs": "*"
  },
  "scripts": {
    "test": "node test.js"
  },
  "readme": "# node-doh\n\nupgrade any http(s) server with error handling via domains\n\n![Hoomer](http://www.wallpaperpimper.com/wallpaper/Shows/The_Simpsons/Doh-1-PV1LXGX876-1024x768.jpg)\n\n## features\n\n - guarantees a request will receive a response when errors occur\n - handles any error during a request callback (no need for fn(err, res))\n - sends 500 with error message by default\n - default and custom error pages\n\n## install\n\n    npm install doh\n\n## usage\n\n### upgrade(server, options)\n\nAdd error handling to an existing server.\n\n    var upgrade = require('doh').upgrade\n      , server = require('http').createServer();\n  \n    server.on('request', function () {\n      process.nextTick(function() {\n        thisFunctionClearlyDoesNotExist(); // errors, ends the response, returns an error page\n      });\n    });\n  \n    server.listen(3000);\n  \n    // call upgrade when you want\n    // to start handling errors\n    upgrade(server);\n\n### createHandler(options)\n\nCreate an adhoc error handler that will capture errors in a domain and respond to with the correct error.\n\n    var options = {template: 'my-err-template.html'}\n      , server = require('http').createServer()\n      , doh = require('doh');\n  \n    server.on('request', function(req, res) { \n      var handler = doh.createHandler(options);\n      handler.run(function() {\n        process.nextTick(function() {\n          throw 'anything'; // will be sent to the response\n        });\n      });\n    });\n\n### createResponder(options)\n\nReturn an error page based on an `Error` object. \n\n    var options = {template: 'my-err-template.html'}\n      , server = require('http').createServer()\n      , doh = require('doh')\n      , respond = doh.createResponder({template: 'my-err-template.html'}) // template - optional\n\n    server.on('request', function(req, res) { \n      var err = new Error('my custom error');\n      respond(err, req, res); // sends an error page\n    });\n\n## error page\n\n![Error Screen](http://images.deploydapp.com/img/doh.png)\n\n## crash only\n\nBy default `doh` handles errors on a domain and responds with an error page. Since node is crash only by design, you'll usually want to `process.exit()` when an error occurs.\n\n    upgrade(server).on('request:error', function(err, req, res) {\n      // at this point the response has been sent\n      // but we can still log out everything before we\n      // restart the server\n      \n      console.error(err, req, res);\n      process.exit();\n    });\n\n## options\n\nYou can pass an options object to `doh.upgrade(server, options)` to override default behavior.\n\n - `template` - path to an ejs error template. Passed `req`, `res`, and `err`. See `assets/error.html`.\n \n## tests\n\n    npm test\n\n**note** - Since `doh` is entirely concerned with error handling, it requires a custom test runner that does not rely on `throw` for failures (see `test.js` for more).\n\n## license\n\nMIT\n \n ",
  "readmeFilename": "README.md",
  "_id": "doh@0.0.4",
  "description": "upgrade any http(s) server with error handling via domains",
  "_from": "doh@>=0.0.4"
}
