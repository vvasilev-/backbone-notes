{
  "name": "corser",
  "description": "A highly configurable, middleware compatible implementation of CORS.",
  "version": "1.1.2",
  "author": {
    "name": "Alexander GrÃ¼neberg",
    "email": "alexander.grueneberg@googlemail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/agrueneberg/Corser"
  },
  "licenses": [
    {
      "type": "The MIT License",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "main": "./lib/corser.js",
  "devDependencies": {
    "mocha": "1.3.x",
    "expect.js": "0.1.x"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha",
    "start": "node server.js"
  },
  "readme": "Corser\n=======\n\nA highly configurable, middleware compatible implementation of [CORS](http://www.w3.org/TR/cors/).\n\n[![Build Status](https://secure.travis-ci.org/agrueneberg/Corser.png)](http://travis-ci.org/agrueneberg/Corser)\n\n\nExamples\n--------\n\n### How to use Corser with `http`\n\n    var http, corser, corserRequestListener;\n\n    http = require(\"http\");\n    corser = require(\"corser\");\n\n    // Create Corser request listener.\n    corserRequestListener = corser.create();\n\n    http.createServer(function (req, res) {\n        // Route req and res through the request listener.\n        corserRequestListener(req, res, function () {\n            if (req.method === \"OPTIONS\") {\n                // End CORS preflight request.\n                res.writeHead(204);\n                res.end();\n            } else {\n                // Your code goes here.\n                res.writeHead(200);\n                res.end(\"Nice weather today, huh?\");\n            }\n        });\n    }).listen(1337);\n\n### How to use Corser as a middleware in Connect\n\nSee `example/connect/server.js` for a working example.\n\n    var connect, corser;\n\n    connect = require(\"connect\");\n    corser = require(\"corser\");\n\n    connect.createServer(\n        // Create Corser request listener, Connect will do the rest.\n        corser.create(),\n        function (req, res, next) {\n            if (req.method === \"OPTIONS\") {\n                // End CORS preflight request.\n                res.writeHead(204);\n                res.end();\n            } else {\n                // Your code goes here.\n                res.writeHead(200);\n                res.end(\"Nice weather today, huh?\");\n            }\n        }\n    ).listen(1337);\n\n### HTTP Proxy\n\nSee `example/proxy/server.js` for a working example of a CORS-enabled HTTP proxy.\n\n\nAPI\n---\n\n### Creating a Corser request listener\n\nCreating a Corser request listener that generates the appropriate response headers to enable CORS is as simple as:\n\n    corser.create()\n\nThis is the equivalent of setting a response header of `Access-Control-Allow-Origin: *`. If you want to restrict the origins, or allow more sophisticated request or response headers, you have to pass a configuration object to `corser.create`.\n\nTo give you full control over everything that happens, Corser will not end preflight requests for you. A preflight request is a special `OPTIONS` request that the browser sends under certain conditions to negotiate with the server what methods, request headers and response headers are allowed for a CORS request. If you don't understand the full impact of this and don't use the `OPTIONS` method for any custom stuff, just end those requests manually after they were routed through the request listener:\n\n    // Let the request go through the request listener first.\n    corserRequestListener(req, res, function () {\n        // CORS preflight requests use the OPTIONS method.\n        if (req.method === \"OPTIONS\") {\n            // End CORS preflight request.\n            res.writeHead(204);\n            res.end();\n        } else {\n\n            //\n            // Your code goes here.\n            //\n\n        }\n    });\n\n\n#### Configuration Object\n\nA configuration object with the following properties can be passed to `corser.create`.\n\n##### `origins`\n\nA case-sensitive whitelist of origins. Unless unbound, if the request comes from an origin that is not in this list, it will not be handled by CORS.\n\nDefault: unbound, i.e. every origin is accepted.\n\n##### `methods`\n\nAn uppercase whitelist of methods. If the request uses a method that is not in this list, it will not be handled by CORS.\n\nDefault: simple methods (`GET`, `HEAD`, `POST`).\n\n##### `requestHeaders`\n\nA case-insentitive whitelist of request headers. If the request uses a request header that is not in this list, it will not be handled by CORS.\n\nDefault: simple request headers (`Accept`, `Accept-Language`, `Content-Language`, `Content-Type`, `Last-Event-ID`).\n\n##### `responseHeaders`\n\nA case-insensitive whitelist of response headers. Any response header that is not in this list will be filtered out by the user-agent (the browser).\n\nDefault: simple response headers (`Cache-Control`, `Content-Language`, `Content-Type`, `Expires`, `Last-Modified`, `Pragma`).\n\n##### `supportsCredentials`\n\nA boolean that indicates if cookie credentials can be transfered as part of a CORS request. Currently, only a few HTML5 elements can benefit from this setting.\n\nDefault: `false`.\n\n##### `maxAge`\n\nAn integer that indicates the maximum amount of time in seconds that a preflight request is kept in the client-side preflight result cache.\n\nDefault: not set.\n\n\nFAQ\n---\n\n### xhr.send returns `Origin xxxxxxxxxxxxxxxxxxxxxx is not allowed by Access-Control-Allow-Origin`.\n\nCheck if the `Origin` header of your request matches one of the origins provided in the `origins` property of the configuration object. If you didn't set any `origins` property, jump to the next question.\n\n\n### xhr.send still returns `Origin xxxxxxxxxxxxxxxxxxxxxx is not allowed by Access-Control-Allow-Origin`.\n\nYour request might use a non-simple method or one or more non-simple headers. According to the specification, the set of simple methods is `GET`, `HEAD`, and `POST`, and the set of simple request headers is `Accept`, `Accept-Language`, `Content-Language`, `Content-Type`, and `Last-Event-ID`. If your request uses **any** other method or header, you have to explicitly list them in the `methods` or `requestHeaders` property of the configuration object.\n\n#### Example\n\nYou want to allow requests that use a `Referer` header. Pass the following configuration object to `corser.create`:\n\n    corser.create({\n        requestHeaders: [\"Referer\"]\n    });\n\n\n### xhr.getResponseHeader returns `Refused to get unsafe header \"xxxxxx\"`.\n\nYour browser blocks every non-simple response headers that was not explicitly allowed in the preflight request. The set of simple response headers is `Cache-Control`, `Content-Language`, `Content-Type`, `Expires`, `Last-Modified`, `Pragma`. If you want to access **any** other response header, you have to explicitly list them in the `responseHeaders` property of the configuration object.\n\n#### Example\n\nYou want to allow clients to read the `ETag` header of a response. Pass the following configuration object to `corser.create`:\n\n    corser.create({\n        responseHeaders: [\"ETag\"]\n    });\n\n\nIssues\n------\n\n- [Chrome <= 17 does not respect `Access-Control-Expose-Headers`](http://code.google.com/p/chromium/issues/detail?id=87338). This has been fixed recently and is already included in the latest Canary build (tested with 19.0.1057.0).\n",
  "readmeFilename": "README.md",
  "_id": "corser@1.1.2",
  "_from": "corser@~1.1.1"
}
